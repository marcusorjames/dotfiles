###### marcusorjames's zsh config <https://github.com/marcusorjames> ######
# Inspired by Luke Smith <https://lukesmith.xyz>

export TERM="xterm-256color"
export EDITOR="nvim"

set guifont=FiraCode\ Nerd\ Font\ 11

# Oh My Zsh and Zsh plugins via znap
export ZSH=$HOME/.znap/ohmyzsh
if [[ -d $ZSH ]]; then
  plugins=(
    git
  )


  # source $ZSH/oh-my-zsh.sh // This breaks everything big sad see znap config
fi
  
source ~/.config/zsh/.znap

exists()
{
  command -v "$1" >/dev/null 2>&1
}

# History in cache directory:
mkdir -p ~/.cache/zsh
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.cache/zsh/history

# enable vi mode
bindkey -v
export KEYTIMEOUT=2

# ---- VIM ---- #

# Use vim keys in tab complete menu:
zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# # Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ ${KEYMAP} == sshcmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
zle-line-init() { zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

# ---- END VIM ---- #

# Use lf to switch directories and bind it to ctrl-o
lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
bindkey -s '^o' 'lfcd\n'

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# Load aliases and shortcuts if existent.
[ -f "$HOME/.config/shortcutrc" ] && source "$HOME/.config/shortcutrc"
[ -f "$HOME/.config/.aliasrc" ] && source "$HOME/.config/.aliasrc"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# NVM Mac
[ -s "/usr/local/opt/nvm/nvm.sh" ] && \. "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# homebrew
[ -s "/home/linuxbrew/.linuxbrew/bin/brew" ] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# bash_completion

# Native zsh completion
autoload -Uz compinit
compinit

# Enable bash completions in zsh
autoload bashcompinit
bashcompinit
compat_dir=${BASH_COMPLETION_COMPAT_DIR:-/etc/bash_completion.d}
if [[ -d $compat_dir && -r $compat_dir && -x $compat_dir ]]; then
    for i in "$compat_dir"/*; do
        [[ ${i##*/} != @($_backup_glob|Makefile*|$_blacklist_glob) && -f \
        $i && -r $i ]] && . "$i"
    done
fi

# zsh-autocomplete
bindkey '\t' menu-select "$terminfo[kcbt]" menu-select # tab

# zsh-autosuggestion
bindkey '^[[Z' autosuggest-accept  # shift + tab

function __in_bash_this_works() { COMPREPLY=(blah); }

complete -F __in_bash_this_works ls

# fzf key bindings and fuzzy completion
source <(fzf --zsh)

export ANSIBLE_NOCOWS=1

# Set go path
export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin

# Set composer path
export PATH=$PATH:~/.composer/vendor/bin

# Set usr/bin PATH
export PATH=$PATH:/usr/local/bin

# Set scripts path
[ -d "$HOME/.scripts" ] && export PATH="$PATH:$(find "$HOME/.scripts" -type d | paste -sd: -)"

# Set private scripts path
[ -d "$HOME/.scripts-private" ] && export PATH="$PATH:$(find "$HOME/.scripts-private" -type d | paste -sd: -)"

# Set yarn path
exists 'yarn' && export PATH="$PATH:$(yarn global bin)"

# direnv
exists 'direnv' && eval "$(direnv hook zsh)"

exists 'zoxide' && eval "$(zoxide init zsh)"

# rbenv
if [ -f $HOME/.rbenv/bin ] ; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

# cargo
if [ -f $HOME/.cargo/env ] ; then
  . "$HOME/.cargo/env"
fi
